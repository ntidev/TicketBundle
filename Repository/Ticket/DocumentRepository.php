<?php

namespace NTI\TicketBundle\Repository\Ticket;

use NTI\TicketBundle\Entity\Ticket\Document;
use NTI\TicketBundle\Model\Resource;

/**
 * DocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentRepository extends \Doctrine\ORM\EntityRepository
{
    const MAX_RESULTS = 100;

    public function getDocumentsByTicketAndKeywords(array $options, $ticketId){

        $options = array(
            "search" => isset($options["search"]) ? $options["search"] : "",
            "sortBy" => isset($options["sortBy"]) ? $options["sortBy"] : "document.uploadDate",
            "orderBy" => (isset($options["orderBy"]) && in_array(strtolower($options["orderBy"]), array("desc", "asc"))) ? $options["orderBy"] : "desc",
            "start" => (isset($options["start"]) && $options["start"] >= 0) ? $options["start"] : 0,
            "limit" => (isset($options["limit"]) && $options["limit"] < self::MAX_RESULTS) ? $options["limit"] : self::MAX_RESULTS,
            "filters" => (isset($options["filters"]) && count($options["filters"]) > 0) ? $options["filters"] : array(),
        );

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('document')
            ->from(Document::class, 'document')
            ->leftJoin('document.ticket', 'ticket')
            ->andWhere(
                $qb->expr()->eq('ticket.id', $qb->expr()->literal($ticketId))
            );

        $totalQb = clone $qb;
        $total = $totalQb->select('COUNT( DISTINCT document.id)')->getQuery()->getSingleScalarResult();

        foreach($options["filters"] as $field => $search) {
            if($field == "" || $search == "") continue;
            switch($field) {
                case "doc_file_name":
                    $qb->andWhere($qb->expr()->like("document.fileName", $qb->expr()->literal("%".$search."%")));
                    break;
                case "doc_upload_date":
                    $start_date = \DateTime::createFromFormat("m/d/Y H:i:s", $search."00:00:00")->format("Y-m-d H:i:s");
                    $end_date = \DateTime::createFromFormat("m/d/Y H:i:s", $search."23:59:59")->format("Y-m-d H:i:s");
                    $qb->andWhere(
                        $qb->expr()->gte("document.uploadDate", $qb->expr()->literal($start_date)),
                        $qb->expr()->lte("document.uploadDate", $qb->expr()->literal($end_date))
                    );
                    break;

                case "doc_format":
                    $qb->andWhere($qb->expr()->eq("document.format", $qb->expr()->literal($search)));
                    break;
                case "doc_upload_user":
                    $qb->andWhere($qb->expr()->eq("document.resource", $qb->expr()->literal($search)));
                    break;
            }
        }

        $totalFilteredQb = clone $qb;
        $totalRecordsFiltered = $totalFilteredQb->select('COUNT( DISTINCT document.id)')->getQuery()->getSingleScalarResult();

        # sort
        if(is_array($options["sortBy"])) {
            foreach($options["sortBy"] as $sort) {
                $qb->addOrderBy($sort, $options["orderBy"]);
            }
        } else {
            $qb->orderBy($options["sortBy"], $options["orderBy"]);
        }

        # limit
        if(null !== $options["limit"])
            $qb->setMaxResults($options["limit"]);
        if(null !== $options["start"])
            $qb->setFirstResult($options["start"]);

        $result = $qb->getQuery()->getResult();

        return array(
            'totalRecords' => intval($total),
            'totalRecordsFiltered' => intval($totalRecordsFiltered),
            'data' => $result,
        );


    }
}
